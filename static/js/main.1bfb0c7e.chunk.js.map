{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","Screens/HomeScreen.js","firebase.js","Screens/SignupScreen.js","Screens/LoginScreen.js","features/userSlice.js","Screens/PlansScreen.js","Screens/ProfileScreen.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHororMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","history","useHistory","transitionNavBar","window","scrollY","addEventListener","removeEventListener","onClick","push","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","auth","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","SignUpScreen","emailRef","useRef","passwordRef","ref","placeholder","type","e","preventDefault","signInWithEmailAndPassword","current","value","then","authUser","catch","error","alert","message","createUserWithEmailAndPassword","LoginScreen","signIn","setSignIn","userSlice","createSlice","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","PlansScreen","ProfileScreen","useSelector","email","signOut","App","dispatch","useDispatch","onAuthStateChanged","userAuth","uid","path","exact","store","configureStore","reducer","userReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wZAMeA,E,OAJEC,EAAMC,OAAO,CAC5BC,QAAS,iCCHLC,G,MAAU,oCAaDC,EAXE,CACfC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,yBAAD,OAA2BH,EAA3B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,iBAAiB,2BAAD,OAA6BP,EAA7B,mBAChBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,OC2CLU,MAhDf,WACE,IAgBkBC,EAAQC,EAhB1B,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBpB,EAAMqB,IAAIjB,EAASE,uBAD3C,cACQgB,EADR,OAEEJ,EACEI,EAAQC,KAAKC,QACXC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,KAAKC,QAAQI,OAAS,KAJ/D,kBAOSN,GAPT,4CADc,uBAAC,WAAD,wBAUdO,KACC,IACHC,QAAQC,IAAId,GAOV,yBACEe,UAAU,SACVC,MAAO,CACLC,eAAgB,QAChBC,gBAAgB,4CAAD,cAA8ClB,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAOmB,cAArD,MACfC,mBAAoB,iBALxB,UAQE,sBAAKL,UAAU,mBAAf,UACE,oBAAIA,UAAU,gBAAd,UACQ,OAALf,QAAK,IAALA,OAAA,EAAAA,EAAOqB,SAAP,OAAgBrB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOsB,QAAvB,OAA+BtB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOuB,iBAEzC,sBAAKR,UAAU,kBAAf,UACE,wBAAQA,UAAU,iBAAlB,kBACA,wBAAQA,UAAU,iBAAlB,wBAEF,oBAAIA,UAAU,sBAAd,UArBYlB,EAsBD,OAACG,QAAD,IAACA,OAAD,EAACA,EAAOwB,SAtBC1B,EAsBS,KArBpB,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQc,QAASb,EAAID,EAAO4B,OAAO,EAAG3B,EAAI,GAAK,MAAQD,QAyB5D,qBAAKkB,UAAU,2B,qBCPNW,MArCf,WACE,MAA2B3B,oBAAS,GAApC,mBAAO4B,EAAP,KAAaC,EAAb,KACMC,EAAUC,cAEVC,EAAmB,WACnBC,OAAOC,QAAU,IACnBL,GAAW,GAEXA,GAAW,IASf,OALA1B,qBAAU,WAER,OADA8B,OAAOE,iBAAiB,SAAUH,GAC3B,kBAAMC,OAAOG,oBAAoB,SAAUJ,MACjD,IAGD,qBAAKhB,UAAS,cAASY,GAAQ,cAA/B,SACE,sBAAKZ,UAAU,gBAAf,UACE,qBACEqB,QAAS,kBAAMP,EAAQQ,KAAK,MAC5BtB,UAAU,WACVuB,IAAI,kEACJC,IAAI,KAEN,qBACEH,QAAS,kBAAMP,EAAQQ,KAAK,aAC5BtB,UAAU,aACVuB,IAAI,gFACJC,IAAI,W,MCSCC,MAvCf,YAAuD,IAAxCnB,EAAuC,EAAvCA,MAAOoB,EAAgC,EAAhCA,SAAgC,IAAtBC,kBAAsB,SACpD,EAA4B3C,mBAAS,IAArC,mBAAO4C,EAAP,KAAeC,EAAf,KAaA,OATA1C,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBpB,EAAMqB,IAAIqC,GADlC,cACQpC,EADR,OAEEuC,EAAUvC,EAAQC,KAAKC,SAFzB,kBAGSF,GAHT,4CADc,uBAAC,WAAD,wBAMdO,KACC,CAAC6B,IAGF,sBAAK1B,UAAU,MAAf,UACE,6BAAKM,IACL,qBAAKN,UAAU,eAAf,SACG4B,EAAOE,KACN,SAAC7C,GAAD,OACI0C,GAAc1C,EAAM8C,cAClBJ,GAAc1C,EAAMmB,gBACtB,qBACEJ,UAAS,sBACP2B,EAAa,mBAAqB,IAGpCJ,IAAG,UAxBA,uCAwBA,OACDI,EAAa1C,EAAM8C,YAAc9C,EAAMmB,eAEzCoB,IAAKvC,EAAMsB,MAJNtB,EAAM+C,aCFZC,MArBf,WACE,OACE,sBAAKjC,UAAU,aAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CACEM,MAAM,oBACNoB,SAAUtD,EAASE,sBACnBqD,YAAU,IAEZ,cAAC,EAAD,CAAKrB,MAAM,eAAeoB,SAAUtD,EAASC,gBAC7C,cAAC,EAAD,CAAKiC,MAAM,aAAaoB,SAAUtD,EAASG,gBAC3C,cAAC,EAAD,CAAK+B,MAAM,gBAAgBoB,SAAUtD,EAASI,oBAC9C,cAAC,EAAD,CAAK8B,MAAM,gBAAgBoB,SAAUtD,EAASK,oBAC9C,cAAC,EAAD,CAAK6B,MAAM,gBAAgBoB,SAAUtD,EAASM,mBAC9C,cAAC,EAAD,CAAK4B,MAAM,iBAAiBoB,SAAUtD,EAASO,qBAC/C,cAAC,EAAD,CAAK2B,MAAM,gBAAgBoB,SAAUtD,EAASQ,yB,wBCV9CsD,GAFcC,IAASC,cATN,CACrBC,OAAQ,0CACRC,WAAY,sCACZC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,8CAIcC,YACVR,IAASD,Q,MC2CPU,MApDf,WACE,IAAMC,EAAWC,iBAAO,MAClBC,EAAcD,iBAAO,MA8B3B,OACE,qBAAK9C,UAAU,eAAf,SACE,iCACE,yCACA,uBAAOgD,IAAKH,EAAUI,YAAY,QAAQC,KAAK,UAC/C,uBAAOF,IAAKD,EAAaE,YAAY,WAAWC,KAAK,aACrD,wBAAQA,KAAK,SAAS7B,QAnBb,SAAC8B,GACdA,EAAEC,iBACFlB,EACGmB,2BACCR,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OAErBC,MAAK,SAACC,GACL3D,QAAQC,IAAI0D,MAEbC,OAAM,SAACC,GAAD,OAAWC,MAAMD,EAAME,aAS5B,qBAGA,+BACE,sBAAM7D,UAAU,qBAAhB,qCACA,sBAAMA,UAAU,qBAAqBqB,QAvC5B,SAAC8B,GAChBA,EAAEC,iBACFlB,EACG4B,+BACCjB,EAASS,QAAQC,MACjBR,EAAYO,QAAQC,OAErBC,MAAK,SAACC,GACL3D,QAAQC,IAAI0D,MAEbC,OAAM,SAACC,GACNC,MAAMD,EAAME,aA4BV,kCCEKE,MA7Cf,WACE,MAA4B/E,oBAAS,GAArC,mBAAOgF,EAAP,KAAeC,EAAf,KACA,OACE,sBAAKjE,UAAU,cAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,qBACEA,UAAU,oBACVuB,IAAI,kEACJC,IAAI,KAGN,wBAAQH,QAAS,kBAAM4C,GAAU,IAAOjE,UAAU,sBAAlD,qBAGA,qBAAKA,UAAU,6BAEjB,qBAAKA,UAAU,oBAAf,SACGgE,EACC,cAAC,EAAD,IAEA,qCACE,4EACA,mEACA,sGAIA,qBAAKhE,UAAU,qBAAf,SACE,iCACE,uBAAOkD,KAAK,QAAQD,YAAY,6BAChC,wBACE5B,QAAS,kBAAM4C,GAAU,IACzBjE,UAAU,0BAFZ,uC,gBChCHkE,EAAYC,YAAY,CACnC5D,KAAM,OACN6D,aAAc,CACZC,KAAM,MAERC,SAAU,CACRC,MAAO,SAACC,EAAOC,GACbD,EAAMH,KAAOI,EAAOC,SAEtBC,OAAQ,SAACH,GACPA,EAAMH,KAAO,SAKZ,EAA0BH,EAAUU,QAA5BL,EAAR,EAAQA,MAAOI,EAAf,EAAeA,OAETE,EAAa,SAACL,GAAD,OAAWA,EAAMH,KAAKA,MAEjCH,IAAf,Q,MCUeY,MA5Bf,WACE,OACE,sBAAK9E,UAAU,cAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,0CACA,2CAEF,kDAEF,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,wCACA,0CAEF,kDAEF,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,2CACA,yCAEF,wBAAQqB,QAAS,aAAjB,8B,MCeO0D,MAhCf,WACE,IAAMV,EAAOW,YAAYH,GAEzB,OACE,sBAAK7E,UAAU,gBAAf,UACE,cAAC,EAAD,IACA,sBAAKA,UAAU,sBAAf,UACE,4CACA,sBAAKA,UAAU,sBAAf,UACE,qBACEuB,IAAI,gFACJC,IAAI,KAEN,sBAAKxB,UAAU,yBAAf,UACE,6BAAKqE,EAAKY,QACV,sBAAKjF,UAAU,uBAAf,UACE,uCACA,cAAC,EAAD,IACA,wBACEqB,QAAS,kBAAMa,EAAKgD,WACpBlF,UAAU,yBAFZ,sCCyBCmF,MAzCf,WACE,IAAMd,EAAOW,YAAYH,GACnBO,EAAWC,cAmBjB,OAlBAlG,qBAAU,WAgBR,OAfoB+C,EAAKoD,oBAAmB,SAACC,GAGzCH,EAFEG,EAGAhB,EAAM,CACJiB,IAAKD,EAASC,IACdP,MAAOM,EAASN,QAKXN,UAKZ,CAACS,IAEF,qBAAKpF,UAAU,MAAf,SACE,cAAC,IAAD,UACIqE,EAGA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOoB,KAAK,WAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,EAAD,SAPJ,cAAC,EAAD,SChCGE,EAAQC,YAAe,CAClCC,QAAS,CACPxB,KAAMyB,KCOUC,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAACmD,GAClCA,EAAaC,kB","file":"static/js/main.1bfb0c7e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;\r\n","const API_KEY = \"4effa948d7cf7bac76d46d8bdf920f13\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-us`,\r\n  fetchNetflixOriginals: `/discover/tv/?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-us`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHororMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import axios from \"./axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Banner.css\";\r\nimport requests from \"./Requests\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  console.log(movie);\r\n\r\n  const truncate = (string, n) => {\r\n    return string?.length > n ? string.substr(0, n - 1) + \"...\" : string;\r\n  };\r\n\r\n  return (\r\n    <header\r\n      className='banner'\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className='banner__contents'>\r\n        <h1 className='banner__title'>\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className='banner__buttons'>\r\n          <button className='banner__button'>Play</button>\r\n          <button className='banner__button'>My List</button>\r\n        </div>\r\n        <h1 className='banner__description'>\r\n          {truncate(movie?.overview, 180)}\r\n        </h1>\r\n      </div>\r\n\r\n      <div className='banner--fadeBottom' />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true);\r\n    } else {\r\n      handleShow(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", transitionNavBar);\r\n    return () => window.removeEventListener(\"scroll\", transitionNavBar);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <div className='nav__contents'>\r\n        <img\r\n          onClick={() => history.push(\"/\")}\r\n          className='nav_logo'\r\n          src='https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png'\r\n          alt=''\r\n        />\r\n        <img\r\n          onClick={() => history.push(\"/profile\")}\r\n          className='nav_avatar'\r\n          src='https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png'\r\n          alt=''\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import axios from \"./axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Row.css\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const base_url = \"https://image.tmdb.org/t/p/original\";\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  return (\r\n    <div className='row'>\r\n      <h2>{title}</h2>\r\n      <div className='row__posters'>\r\n        {movies.map(\r\n          (movie) =>\r\n            ((isLargeRow && movie.poster_path) ||\r\n              (!isLargeRow && movie.backdrop_path)) && (\r\n              <img\r\n                className={`row__poster ${\r\n                  isLargeRow ? \"row__posterLarge\" : \"\"\r\n                }`}\r\n                key={movie.id}\r\n                src={`${base_url}${\r\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                }`}\r\n                alt={movie.name}\r\n              />\r\n            )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from \"react\";\r\nimport Banner from \"../Banner\";\r\nimport \"./HomeScreen.css\";\r\nimport Nav from \"../Nav\";\r\nimport requests from \"../Requests\";\r\nimport Row from \"../Row\";\r\n\r\nfunction HomeScreen() {\r\n  return (\r\n    <div className='homescreen'>\r\n      <Nav />\r\n      <Banner />\r\n      <Row\r\n        title='NETFLIX ORIGINALS'\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow\r\n      />\r\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending} />\r\n      <Row title='Top Rated ' fetchUrl={requests.fetchTopRated} />\r\n      <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} />\r\n      <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} />\r\n      <Row title='Horror Movies' fetchUrl={requests.fetchHororMovies} />\r\n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} />\r\n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC14fHbHqHGdVlu_8DJLizSSOnz24S7XOQ\",\r\n  authDomain: \"netflix-clone-5e34f.firebaseapp.com\",\r\n  projectId: \"netflix-clone-5e34f\",\r\n  storageBucket: \"netflix-clone-5e34f.appspot.com\",\r\n  messagingSenderId: \"918373676995\",\r\n  appId: \"1:918373676995:web:b0801035f628c3db2f6f76\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\n\r\nexport { auth };\r\nexport default db;\r\n","import React, { useRef } from \"react\";\r\nimport { auth } from \"../firebase\";\r\nimport \"./SignupScreen.css\";\r\n\r\nfunction SignUpScreen() {\r\n  const emailRef = useRef(null);\r\n  const passwordRef = useRef(null);\r\n\r\n  const register = (e) => {\r\n    e.preventDefault();\r\n    auth\r\n      .createUserWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n      )\r\n      .then((authUser) => {\r\n        console.log(authUser);\r\n      })\r\n      .catch((error) => {\r\n        alert(error.message);\r\n      });\r\n  };\r\n\r\n  const signIn = (e) => {\r\n    e.preventDefault();\r\n    auth\r\n      .signInWithEmailAndPassword(\r\n        emailRef.current.value,\r\n        passwordRef.current.value\r\n      )\r\n      .then((authUser) => {\r\n        console.log(authUser);\r\n      })\r\n      .catch((error) => alert(error.message));\r\n  };\r\n\r\n  return (\r\n    <div className='signupScreen'>\r\n      <form>\r\n        <h1>Sign In</h1>\r\n        <input ref={emailRef} placeholder='Email' type='email' />\r\n        <input ref={passwordRef} placeholder='Password' type='password' />\r\n        <button type='submit' onClick={signIn}>\r\n          Sign in\r\n        </button>\r\n        <h4>\r\n          <span className='signupScreen__gray'>Don't have an account? </span>\r\n          <span className='signupScreen__link' onClick={register}>\r\n            Sign up now\r\n          </span>\r\n        </h4>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUpScreen;\r\n","import React, { useState } from \"react\";\r\nimport \"./LoginScreen.css\";\r\nimport SignupScreen from \"./SignupScreen\";\r\n\r\nfunction LoginScreen() {\r\n  const [signIn, setSignIn] = useState(false);\r\n  return (\r\n    <div className='loginScreen'>\r\n      <div className='loginScreen__background'>\r\n        <img\r\n          className='loginScreen__logo'\r\n          src='https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png'\r\n          alt=''\r\n        />\r\n\r\n        <button onClick={() => setSignIn(true)} className='loginScreen__button'>\r\n          Sign in\r\n        </button>\r\n        <div className='loginScreen__gradient' />\r\n      </div>\r\n      <div className='loginScreen__body'>\r\n        {signIn ? (\r\n          <SignupScreen />\r\n        ) : (\r\n          <>\r\n            <h1>Unlimited films, TV programmes and more...</h1>\r\n            <h2>Watch anywhere, cancel at anytime</h2>\r\n            <h3>\r\n              Ready ti watch? Enter you email to create or restart your\r\n              membership\r\n            </h3>\r\n            <div className='loginScreen__input'>\r\n              <form>\r\n                <input type='email' placeholder='Enter your email address' />\r\n                <button\r\n                  onClick={() => setSignIn(true)}\r\n                  className='loginScreen__getStarted'\r\n                >\r\n                  GET STARTED\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginScreen;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import React, { useState } from \"react\";\r\nimport \"./PlansScreen.css\";\r\n\r\nfunction PlansScreen() {\r\n  return (\r\n    <div className='plansScreen'>\r\n      <div className='plansScreen__plan'>\r\n        <div className='plansScreen__info'>\r\n          <h4>Premium </h4>\r\n          <h5>4K HDR</h5>\r\n        </div>\r\n        <button>Subscribe</button>\r\n      </div>\r\n      <div className='plansScreen__plan'>\r\n        <div className='plansScreen__info'>\r\n          <h4>Basic </h4>\r\n          <h5>1080p</h5>\r\n        </div>\r\n        <button>Subscribe</button>\r\n      </div>\r\n      <div className='plansScreen__plan'>\r\n        <div className='plansScreen__info'>\r\n          <h4>Standard </h4>\r\n          <h5>720p</h5>\r\n        </div>\r\n        <button onClick={() => {}}>Subscribe</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlansScreen;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport { auth } from \"../firebase\";\r\nimport Nav from \"../Nav\";\r\nimport PlansScreen from \"./PlansScreen\";\r\nimport \"./ProfileScreen.css\";\r\n\r\nfunction ProfileScreen() {\r\n  const user = useSelector(selectUser);\r\n\r\n  return (\r\n    <div className='profileScreen'>\r\n      <Nav />\r\n      <div className='profileScreen__body'>\r\n        <h1>My Profile</h1>\r\n        <div className='profileScreen__info'>\r\n          <img\r\n            src='https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png'\r\n            alt=''\r\n          />\r\n          <div className='profileScreen__details'>\r\n            <h2>{user.email}</h2>\r\n            <div className='profileScreen__plans'>\r\n              <h3>Plans</h3>\r\n              <PlansScreen />\r\n              <button\r\n                onClick={() => auth.signOut()}\r\n                className='profileScreen__signOut'\r\n              >\r\n                Sign Out\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfileScreen;\r\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport HomeScreen from \"./Screens/HomeScreen\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport LoginScreen from \"./Screens/LoginScreen\";\nimport { auth } from \"./firebase\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, logout, selectUser } from \"./features/userSlice\";\nimport ProfileScreen from \"./Screens/ProfileScreen\";\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if (userAuth) {\n        //logged in\n        dispatch(\n          login({\n            uid: userAuth.uid,\n            email: userAuth.email,\n          })\n        );\n      } else {\n        //logged out\n        dispatch(logout());\n      }\n    });\n\n    return unsubscribe;\n  }, [dispatch]);\n  return (\n    <div className='app'>\n      <Router>\n        {!user ? (\n          <LoginScreen />\n        ) : (\n          <Switch>\n            <Route path='/profile'>\n              <ProfileScreen />\n            </Route>\n            <Route exact path='/'>\n              <HomeScreen />\n            </Route>\n          </Switch>\n        )}\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"../features/userSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}